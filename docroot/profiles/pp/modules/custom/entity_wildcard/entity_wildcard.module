<?php
/**
 * @file
 * Entity Wildcard.
 */

/**
 * Implements hook_entity_info_alter().
 */
function entity_wildcard_entity_info_alter(array &$entity_info) {
  foreach ($entity_info as $type => $info) {
    if (
      empty($entity_info[$type]['access callback']) &&
      !empty($info['admin ui']['path']) &&
      strpos($info['admin ui']['path'], '%') !== FALSE
    ) {
      $entity_info[$type]['access callback'] = 'entity_wildcard_access';
    }
  }
}

/**
 * Parse wildcard arguments.
 *
 * @param array $arguments
 *   An array of arguments from internal functions.
 *
 * @return array
 *   List: ENTITY_ID|ENTITY_OBJECT, ENTITY_TYPE and ENTITY_INFO.
 */
function entity_wildcard_parse_arguments(array &$arguments) {
  $entity = array_shift($arguments);
  $entity_type = array_pop($arguments);
  $entity_info = entity_get_info($entity_type);

  return [$entity, $entity_type, $entity_info];
}

/**
 * Implements %hook_load().
 *
 * Load data for "%entity_wildcard_object" wildcard.
 *
 * @internal
 *
 * @see \Entity\Wildcard\UIController::loadWildcard()
 *
 * @return mixed
 *   Wildcard data.
 */
function entity_wildcard_object_load() {
  // This function has the following set of arguments:
  // @param string $entity_id
  //   Entity ID or machine name using which an entity object can be loaded.
  // @param mixed $wildcard...
  //   Unlimited amount of values which loaded by WILDCARD_load() function.
  // @param string $entity_type
  //   The type of entity.
  $wildcards = func_get_args();
  // This function removes first and last values from an array by reference.
  list($entity_id, $entity_type, $entity_info) = entity_wildcard_parse_arguments($wildcards);

  // Allow to alter wildcard processing by extending the main object.
  return $entity_info['admin ui']['controller class']::loadWildcard($entity_id, $entity_type, $wildcards);
}

/**
 * Check access to entity.
 *
 * @see entity_access()
 *
 * @param string $operation
 *   Operation over the entity.
 *
 * @return bool
 *   A state of checking.
 */
function entity_wildcard_access($operation) {
  $wildcards = func_get_args();
  list($operation, $entity_type, $entity_info) = entity_wildcard_parse_arguments($wildcards);

  // If amount of arguments more than one then first - is an entity object.
  if (count($wildcards) > 1) {
    $wildcards[] = array_shift($wildcards);
  }
  // Set a dummy entity object.
  else {
    $wildcards[] = NULL;
  }

  return $entity_info['admin ui']['controller class']::access($operation, $entity_type, $wildcards);
}

/**
 * Get form for managing entity.
 *
 * @see entity_ui_get_form()
 *
 * @param \Entity $entity
 *   Entity object.
 * @param string $operation
 *   Operation over the entity.
 *
 * @return array
 *   Form definition.
 */
function entity_wildcard_entity_ui_get_form($entity, $operation) {
  $arguments = func_get_args();
  // @see entity_wildcard_object_load()
  list($entity, $entity_type, $entity_info) = entity_wildcard_parse_arguments($arguments);
  $operation = array_shift($arguments);
  $bundle = $entity_type;

  if (empty($entity_info)) {
    drupal_not_found();
    exit();
  }

  if (empty($entity)) {
    switch ($operation) {
      case 'add':
        $entity = entity_create($entity_type, []);
        break;

      // Handle cloning. We cannot do that in the wrapper callback as it is too late
      // for changing arguments.
      case 'clone':
        $entity = entity_ui_clone_entity($entity_type, $entity);
        break;
    }
  }
  else {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }

  // Do not use drupal_get_form(), but invoke drupal_build_form() ourself so
  // we can pre populate the form state.
  $form_state['wrapper_callback'] = 'entity_ui_main_form_defaults';
  $form_state['entity_type'] = $entity_type;
  form_load_include($form_state, 'inc', 'entity', 'includes/entity.ui');

  // We don't pass the entity type as first parameter, as the implementing
  // module knows the type anyway. However, in order to allow for efficient
  // hook_forms() implementations we append the entity type as last argument,
  // which the module implementing the form constructor may safely ignore.
  // @see entity_forms()
  $form_state['build_info']['args'] = array_merge([$entity, $operation], $arguments, [$entity_type, $bundle]);

  return drupal_build_form('entity_wildcard_entity_form', $form_state);
}

/**
 * Implements hook_form().
 *
 * @inheritdoc
 * @internal
 *
 * @see entity_wildcard_entity_ui_get_form()
 */
function entity_wildcard_entity_form(array $form, array &$form_state) {
  // A set of wildcard arguments, ENTITY, OPERATION, ENTITY_TYPE and BUNDLE.
  $arguments = $form_state['build_info']['args'];
  $bundle = (string) array_pop($arguments);
  // Set a correct order of arguments. When we have a deal with
  // wildcards, then they are always will be before the wildcard
  // of our entity and we need to process this order.
  list($entity, $entity_type, $entity_info) = entity_wildcard_parse_arguments($arguments);
  $operation = array_shift($arguments);
  // Restructure arguments array in order to path wildcards. Last three
  // arguments always be: ENTITY, OPERATION, ENTITY_TYPE.
  $arguments = array_merge($arguments, [$entity, $operation, $entity_type]);

  $toCamelCase = function ($string) {
    return implode(array_map('ucfirst', explode('_', $string)));
  };

  // If bundle name equals to the type of entity then entity has no bundles.
  if ($bundle === $entity_type) {
    $bundle = '';
  }
  else {
    // Split bundle name by "_" character, capitalize every word
    // and create a CamelCase string.
    //
    // @example
    // bundle_name -> BundleName
    $bundle = $toCamelCase($bundle);
  }

  $wrapper_id = "entity_wildcard_$entity_type" . ('' === $bundle ? '' : "_$bundle");
  $wildcard_number = 0;

  // Process wildcards in path. For example we have a path: "user/%user/TEST".
  // The first wildcard index will be "0" and in "$arguments" array will have
  // a loaded value for this wildcard. If we modify a path from example above
  // to "user/%user/%test/TEST" then will have two objects for two wildcards.
  //
  // When an entity is set on a path with wildcards, then reasonable to assume
  // that this entity depends on data from previous wildcards. Let's set it.
  foreach (explode('/', $entity_info['admin ui']['path']) as $arg) {
    if (strpos($arg, '%') !== FALSE) {
      // Let's use a "%user" wildcard from example above. In this
      // case "setUser" method will be called for our entity object.
      $method = 'set' . $toCamelCase(ltrim($arg, '%'));

      if (method_exists($entity, $method)) {
        $entity->{$method}($arguments[$wildcard_number]);
      }

      // Increase wildcards number to be able match next value.
      $wildcard_number++;
    }
  }

  $form['#prefix'] = '<div id="' . $wrapper_id . '">';
  $form['#suffix'] = '</div>';

  $form_state['build_info']['entity_wildcard'] = [
    'method' => "entity{$bundle}Form",
    'arguments' => $arguments,
    'controller' => $entity_info['admin ui']['controller class'],
    'html_wrapper' => $wrapper_id,
  ];

  // @example
  // OBJECT->entityForm(...)
  // OBJECT->entity<BundleName>Form(...)
  entity_wildcard_call_form_hook($form, $form_state);
  entity_wildcard_set_ajax_handler($form, $wrapper_id);
  drupal_set_title(entity_ui_get_action_title($form_state['op'], $entity_type, empty($bundle) ? NULL : $bundle));

  // Add unique classes for customizations.
  $form += ['#attributes' => ['class' => []]];
  $form['#attributes']['class'] = array_merge($form['#attributes']['class'], [
    'entity-form', $form_state['op'], $entity_type, $bundle
  ]);

  return $form;
}

/**
 * Implements hook_form_validate().
 *
 * @inheritdoc
 * @internal
 *
 * @see entity_wildcard_entity_form()
 */
function entity_wildcard_entity_form_validate(array &$form, array &$form_state) {
  // @example
  // OBJECT->entityFormValidate(...)
  // OBJECT->entity<BundleName>FormValidate(...)
  entity_wildcard_call_form_hook($form, $form_state, 'validate');
}

/**
 * Implements hook_form_submit().
 *
 * @inheritdoc
 * @internal
 *
 * @see entity_wildcard_entity_form()
 */
function entity_wildcard_entity_form_submit(array $form, array &$form_state) {
  // @example
  // OBJECT->entityFormSubmit(...)
  // OBJECT->entity<BundleName>FormSubmit(...)
  entity_wildcard_call_form_hook($form, $form_state, 'submit');
}

/**
 * Implements hook_form_ajax().
 *
 * @inheritdoc
 * @internal
 *
 * @see entity_wildcard_entity_form()
 */
function entity_wildcard_entity_form_ajax(array $form, array &$form_state) {
  $element = $form_state['triggering_element'];
  $commands = [];

  // Call custom method of a controller.
  if (isset($element['#ajax']['method'])) {
    $method = $element['#ajax']['method'];
    // Call method as is.
    $unprefixed = TRUE;
  }
  // Call default AJAX handler.
  else {
    $method = 'ajaxHandler';
    // Prefix method name with "entityForm" or "entity<BundleName>Form".
    $unprefixed = FALSE;
  }

  // Call AJAX hook. Allow to set additional AJAX commands.
  entity_wildcard_call_form_hook($form, $form_state, $method, [&$commands, $element], $unprefixed);

  // Rebuild form if needed.
  if (!empty($form_state['rebuild'])) {
    $form = drupal_rebuild_form($form['#form_id'], $form_state, $form);
  }

  // Render the form firstly, then - execute other AJAX commands.
  array_unshift($commands, ajax_command_replace('#' . $form_state['build_info']['entity_wildcard']['html_wrapper'], drupal_render($form)));

  return [
    '#type' => 'ajax',
    '#commands' => $commands,
  ];
}

/**
 * Call a method of entity controller.
 *
 * @internal
 *
 * @param array $form
 *   Form definition.
 * @param array $form_state
 *   State of a form.
 * @param string $hook
 *   Hook or method name to call.
 * @param array $extra_args
 *   Additional arguments which will be passed to a method.
 * @param bool $unprefixed
 *   Prefix method with "entityForm" or "entity<BundleName>Form" or not.
 */
function entity_wildcard_call_form_hook(array &$form, array &$form_state, $hook = '', array $extra_args = [], $unprefixed = FALSE) {
  $data = $form_state['build_info']['entity_wildcard'];
  $method = $unprefixed ? $hook : $data['method'] . ucfirst($hook);

  if (method_exists($data['controller'], $method)) {
    call_user_func_array([$data['controller'], $method], array_merge([&$form, &$form_state], $data['arguments'], $extra_args));
  }
}

/**
 * Attach AJAX callbacks to controller.
 *
 * @internal
 *
 * @param array $form
 *   Form definition.
 * @param string $wrapper_id
 *   ID of HTML form wrapper.
 */
function entity_wildcard_set_ajax_handler(array &$form, $wrapper_id) {
  foreach (element_children($form) as $child) {
    if (isset($form[$child]['#ajax'])) {
      $ajax =& $form[$child]['#ajax'];
      $ajax = [
        'callback' => 'entity_wildcard_entity_form_ajax',
        'wrapper' => $wrapper_id,
        'method' => is_string($ajax) ? $ajax : (is_array($ajax) && isset($ajax['callback']) ? $ajax['callback'] : ''),
      ];
    }

    // Re-run processing only for elements.
    call_user_func_array(__FUNCTION__, [&$form[$child], $wrapper_id]);
  }
}
