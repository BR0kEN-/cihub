<?php
/**
 * @file
 * Ansible.
 */

define('ANSIBLE_MODULE_NAME', 'ansible');

/**
 * Implements hook_node_info().
 */
function ansible_node_info() {
  $info = [];

  $info['server'] = [
    'name' => t('Server'),
    // @see ansible_server_form()
    'base' => 'ansible_server',
    'locked' => TRUE,
    'has_title' => TRUE,
    'title_label' => t('Title'),
    'description' => t('Storage for information about physical servers.'),
  ];

  return $info;
}

/**
 * Implements hook_init().
 */
function ansible_init() {
  ansible_include('fields');
//  ansible_create_fields(ansible_fields_schema('node', 'server'), TRUE);
}

/**
 * Implements hook_admin_paths_alter().
 */
function ansible_admin_paths_alter(array &$paths) {
  $paths['user'] = FALSE;
}

function ansible_server_form(\stdClass $node, array &$form_state) {
  $form = node_content_form($node, $form_state);

  $form['#validate'][] = 'ansible_server_form_validate';

  return $form;
}

function ansible_server_form_validate(array $form, array &$form_state) {
  /* @var \EntityDrupalWrapper $wrapper */
  $wrapper = entity_metadata_wrapper($form['#entity_type'], $form['#node']);
  $filename = drupal_tempnam('temporary://', 'ansible_inventory');
  $content = [];
  $values = [];

  foreach ([
    'ansible_host' => TRUE,
    'ansible_user' => 'root',
    'ansible_port' => 22,
    'ansible_ssh_private_key_file' => '',
  ] as $property => $value) {
    if (isset($wrapper->{$property})) {
      $value = $wrapper->{$property}->value() ?: $value;
    }

    $content[] = "$property=$value";
    $values[$property] = $value;
  }

  if (file_put_contents($filename, $content)) {
    list($output, $status) = ansible_provision($filename, $values['ansible_host']);
  }
}

function ansible_provision_form(array $form, array &$form_state, \stdClass $node) {
  /* @var \EntityDrupalWrapper $wrapper */
  $wrapper = entity_metadata_wrapper('node', $node);

  $form['actions'] = [
    '#type' => 'actions',
  ];

  $form['actions']['deploy'] = [
    '#type' => 'submit',
    '#value' => t('Deploy'),
  ];

  return $form;
}

function ansible_provision_form_submit(array $form, array &$form_state) {

}

function ansible_provision($inventory, $limit) {
  $output = NULL;
  $return_var = NULL;

  exec(format_string("php !script -i $inventory -l $limit -p !playbook", [
    '!script' => __DIR__ . '/ansible.inc',
    '!playbook' => __DIR__ . '/playbook.yml',
  ]), $output, $return_var);

  return [$output, $return_var];
}

/**
 * Include module files.
 *
 * @param string $type
 *   File type.
 * @param string $dir
 *   Directory name.
 * @param string $extension
 *   File extension.
 *
 * @return string
 *   Full path to file.
 */
function ansible_include($type, $dir = 'includes', $extension = 'inc') {
  $file = sprintf("%s/$dir/%s.$type.$extension", drupal_get_path('module', ANSIBLE_MODULE_NAME), ANSIBLE_MODULE_NAME);

  if (file_exists($file)) {
    // Allow to require only files with PHP code.
    if ('inc' === $extension) {
      // @codingStandardsIgnoreStart
      require_once $file;
      // @codingStandardsIgnoreEnd
    }

    return $file;
  }

  return '';
}
